DROP DATABASE IF EXISTS store;
CREATE DATABASE IF NOT EXISTS store;

DROP TABLE IF EXISTS store.user;

CREATE TABLE IF NOT EXISTS store.user (
	id INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    firstname VARCHAR(45) NOT NULL, 
    surname VARCHAR(45) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
	password VARCHAR(255) NOT NULL,
    create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    update_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS store.product;
CREATE TABLE IF NOT EXISTS store.product (
	id	INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    name VARCHAR(255) NOT NULL,
    price DECIMAL(5,2) NOT NULL,
    slug VARCHAR (255) NOT NULL,
    description TEXT,
    price_with_discount DECIMAL(5, 2),
    enabled BOOLEAN DEFAULT 0 NOT NULL,
    stock INT UNSIGNED DEFAULT 0 NOT NULL,
    create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    update_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS store.product_option;
CREATE TABLE IF NOT EXISTS store.product_option (
	id	INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    product_id INT UNSIGNED NOT NULL ,
    title VARCHAR(20) NOT NULL,
    shape ENUM("square", "circle") NOT NULL DEFAULT "square",
    radius INT UNSIGNED  DEFAULT 0 NOT NULL,
    type ENUM("text", "color") NOT NULL DEFAULT "text",
    `values` VARCHAR(255) NOT NULL,
	CONSTRAINT fk_product_product_option
    FOREIGN KEY (product_id)
    REFERENCES store.product(id)
    ON DELETE CASCADE
);

DROP TABLE IF EXISTS store.product_image;
CREATE TABLE IF NOT EXISTS store.product_image (
	id	INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    product_id INT UNSIGNED NOT NULL,
    path VARCHAR(255) NOT NULL,
    CONSTRAINT fk_product_product_image
    FOREIGN KEY (product_id)
    REFERENCES store.product(id)
    ON DELETE CASCADE /*serve para exclui todas as referencias*/
);

DROP TABLE IF EXISTS store.category;
CREATE TABLE IF NOT EXISTS store.category (
	id	INT UNSIGNED PRIMARY KEY AUTO_INCREMENT NOT NULL,
    name VARCHAR(255) NOT NULL,
    slug VARCHAR(255) NOT NULL,
    create_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    update_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

DROP TABLE IF EXISTS store.product_category;
CREATE TABLE IF NOT EXISTS store.product_category(
	CONSTRAINT fk_product_product_category
    FOREIGN KEY (product_id)
    REFERENCES store.product(id)
    ON DELETE CASCADE,
    CONSTRAINT fk_category_product_category
    FOREIGN KEY (product_id)
    REFERENCES store.category(id)
	ON DELETE CASCADE,
	product_id INT UNSIGNED NOT NULL,
    category_id INT UNSIGNED NOT NULL
);
---------------------------------------------------------------------------------------------------------------------------------------------

INSERT INTO store.user (firstname, surname, email, password) VALUES 
('João', 'Silva', 'joao.silva@example.com', 'senha123'),
('Maria', 'Oliveira', 'maria.oliveira@example.com', 'senha456'),
('Carlos', 'Santos', 'carlos.santos@example.com', 'senha789');

INSERT INTO store.product (name, price, slug, description, price_with_discount, enabled, stock) VALUES 
('Aroduto A', 100.00, 'produto-a', 'Descrição do Produto A', 90.00, 1, 50),
('Produto B', 200.00, 'produto-b', 'Descrição do Produto B', 180.00, 1, 30),
('Produto C', 150.00, 'produto-c', 'Descrição do Produto C', NULL, 1, 0);

INSERT INTO store.product_option (product_id, title, shape, radius, type, `values`) VALUES 
(1, 'Opção A1', 'circle', 5, 'text', 'Valor A1'),
(1, 'Opção A2', 'square', 0, 'color', 'Vermelho'),
(2, 'Opção B1', 'circle', 10, 'text', 'Valor B1'),
(3, 'Opção C1', 'square', 0, 'color', 'Azul');

INSERT INTO store.product_image (product_id, path) VALUES 
(1, '/imagens/produto-a-imagem1.jpg'),
(1, '/imagens/produto-a-imagem2.jpg'),
(2, '/imagens/produto-b-imagem1.jpg'),
(3, '/imagens/produto-c-imagem1.jpg');

INSERT INTO store.category (name, slug) VALUES 
('Eletrônicos', 'eletronicos'),
('Roupas', 'roupas'),
('Alimentos', 'alimentos');

INSERT INTO store.product_category (product_id, category_id) VALUES 
(1, 1),
(2, 1),
(3, 2);

SELECT name, title FROM store.product as p
INNER JOIN store.product_option as po
ON product_id = po.product_id;

SELECT * FROM store.product as p
INNER JOIN store.product_category as pc
ON p.id = p.id;

SELECT p.name, po.title FROM store.product as p
INNER JOIN store.product_option as po
ON po.product_id = p.id WHERE p.price > 20;

SELECT p.name, po.title FROM store.product as p
INNER JOIN store.product_option as po
ON po.product_id = p.id WHERE p.name like'%novo%';

SELECT p.name, pi.path FROM store.product as p
LEFT JOIN store.product_image as pi 	
ON pi.product_id = p.id;

SELECT p.name, pi.path FROM store.product as p
LEFT JOIN store.product_image as pi		/*CORRETO*/
ON pi.product_id = p.id;

SELECT p.name, c.name FROM store.product as p
LEFT JOIN store.product_category as pc
ON p.id = pc.product_id  			/*CORRETO*/
LEFT JOIN store.category as c
ON pc.category_id = c.id;

SELECT * FROM store.product as p
INNER JOIN store.product_option as po 		/*CORRETO*/
ON p.id = po.product_id  WHERE p.price < 200;

SELECT p.name, pi.path FROM store.product_image as pi
INNER JOIN store.product as p
ON pi.product_id = p.id WHERE p.name like'A%';

SELECT c.name FROM store.category as c
INNER JOIN store.product as p
ON c.name = p.id;

-------------------------------------

